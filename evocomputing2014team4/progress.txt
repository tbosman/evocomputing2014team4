------------------------------------
# Thomas Bosman 9/9 
==========================


Settings as of 9/9 16:44 
Popsize = eval/1000 or eval/2000, crossover = 0.25 local_discrete, 0.25 local intermediary, 0.5 
function1 4.9924686364239115
function2 0.14282775568793896
function3 6.796286950684296

------------------------------------
# Thomas Bosman 9/9 
==========================
Settings as of 9/9 16:44 
Popsize = eval/1000 or eval/2000, crossover = 0.25 local_discrete, 0.25 local intermediary, 0.5 none
NEW: if function is irregular, survival is mu+lambda   
function1
0.7377455826226342
function2
0.02500366581518021
function3
6.796286950684296

Decline of function1 and function 2, function 3 no change. Function 1 and function seem to be irregular.  


------------------------------------
# Thomas Bosman 10/9 
==========================
State of project as of 9/9 22:44 
With kmeans cluster survivor selector (was not in commit sorry)
#SCORE 
function1 9.135145298217214
function2 0.0368317817913006
function3 8.16681046856626

------------------------------------
# Thomas Bosman 10/9 
==========================
State as of 10/9 1:44
Changed : if( !isRegular && isSeparable) 
 - use mu+lambda survival 
 
#score# 
function1 8.418557851360736
function2 0.0368317817913006 
function3 8.16681046856626

Only 1 has changed so function1 is irregular and separable 
ERGO function 2 is irregular and not separable
------------------------------------
# Thomas Bosman 10/9 
==========================
State as of 10/9 16:44
Changed : if( !isRegular && !isSeparable) 
 - use mu+lambda survival 
 - local discrete crossover 
 #score#
function1 9.135145298217214
function2 0.12926881848677232
function3 8.16681046856626
------------------------------------
# Thomas Bosman 10/9 
==========================
State as of 10/9 22:44

###Score (multimodal popsize -> evals/1000, single elite value for
function2)
function1 8.927270844149023
function2 0.03834375683370441
function3 8.168353347189006

[ reverted multimodal popsize after this ]
------------------------------------
# Thomas Bosman 10/9 
==========================
State as of 11/9 10:44
last edit 
defaultEpsilon0 > 0.001
unimodal popsize = evals/2500
function1 8.412192100680482
function2 0.05923518983016235
function3 8.16681046856626

------------------------------------
# Thomas Bosman 11/9 
==========================
State as of 11/9 19:44, is commit c285c85
added covariance adaptive
added default learning params
function1 9.998665762156602
function2 0.03892741824603285
function3 8.01612381140475
------------------------------------
# Thomas Bosman 11/9 
==========================
State as of 11/9 22:44,
with covariacne adaptive REALLY on, heating and cooling, offspring size was accidentily 7*popsize
###Score ###
function1 9.96904535295689
function2 0.02056797927550662
function3 8.085975246257933
------------------------------------
# Thomas Bosman 11/9 
==========================
offpsring size 7 -> 4
State as of 12/9 10:44
### SCORE ### 
function1 9.96579202132097
function2 0.19406737008946334
function3 8.047319207102454
------------------------------------
# Thomas Bosman 11/9 
==========================
Parameter tweaks to infer evals 
function1 9.96579202132097
function2 0.04926531744349162 (= new) 
function3 8.047319207102454

Therefore function1 and 3 have 10k intervals, function2 has > 100K 

------------------------------------
# Thomas Bosman 11/9 
==========================
##SCORE##

Parameter tweaks to infer evals 
function1 9.96579202132097
function2 0.18852198543569315(= new) 
function3 8.047319207102454

Thereforec function2 has > 5 mio evalss

##SCORE##
Parameter tweaks to infer evals 
function1 9.96579202132097
function2 0.0(= new) 
function3 8.047319207102454

Therefore function2 < 1 mio intervals, our >50 mio and pop size too small (Weird)
##SCORE##
function1 9.98856222460951
function2 0.12506895955761937
function3 6.046066519484255

As of 14/9 10:44
##SCORE##
function1 9.988819013247634
function2 0.12506895955761937
function3 6.505565470080555

func2 has evals definitely >100k <1mio

As of 14/9 13:44
##SCORE##
function1 9.986340778948342
function2 0.12506895955761937
function3 6.399946643968868

As of 14/9 16:44
##SCORE##
function1 9.998944482268064
function2 0.07405455537858596
function3 6.781847140444593

As of 14/9 19:44
##SCORE##
function1 9.770103255488815
function2 0.017153552911111515
function3 8.652772623856006

As of 14/9 07:44
Utilises 5 restarts 
##SCORE##
function1 9.801983977144392 
function2 0.02417559940050295 
function3 7.762763899125966

s of 15/9 10:44
removes restarts, pop = 50, startsize=evals/2
kmeans retains cluster centers, fixed force numclusters
##SCORE##
function1 9.722642555094925 
function2 0.028661728220063982 
function3 2.5623156038677566

15/9 13:44
##SCORE##
function1 9.622018227797884
function2 0.030723613699920486 
function3 8.970320714471999

15/9 16:44
##SCORE##
function1 9.283906229248526
function2 4.807888212572694 
function3 6.902549591848465

15/9 19:44
##SCORE##
function1 9.979311958080723
function2 0.12596952493496857 
function3 5.592523666894253


15/9 22:44
##SCORE##
function1 9.979311958080723
function2 0.2980590555540211 
function3 6.2844065166033465

15/9 10:44
##SCORE##
function1 9.316807054442119
function2 4.945555695210683 
function3 6.8854848556631865

15/9 13:44
##SCORE##
function1 9.097343211502611
function2 5.009267253642139 
function3 7.019194392900749


15/9 22:44
##SCORE##
function1 9.10462908438221
function2 5.076671379066923 
function3 7.9304627560906935


17/9 01:44
##SCORE##
function1 9.01131398620416
function2 3.6378464959624353
function3 8.765468587307089


17/9 04:44
##SCORE##
function1 9.17820901737932
function2 5.517323345208562
function3 8.59644796407604

17/9 07:44
##SCORE##
function1 9.25201904305436
function2 5.2972045362394375
function3 8.68665808592672

17/9 13:44
##SCORE##
function1 9.25201904305436
function2 6.0786746315907845
function3 9.684194498859863


17/9 13:44
##SCORE##
function1 9.235249447973407
function2 8.83691849830527
function3 6.014857108432724

